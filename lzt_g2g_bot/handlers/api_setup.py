from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.crud import get_or_create_user, save_lzt_token, save_g2g_keys, get_user_api_keys
from services.lzt_api import test_lzt_connection
from services.g2g_api import test_g2g_connection
from services.encryption import encryption_service
from utils.keyboards import get_api_setup_keyboard, get_back_keyboard

router = Router()

class APIStates(StatesGroup):
    waiting_lzt_token = State()
    waiting_g2g_api_key = State()
    waiting_g2g_secret = State()
    waiting_g2g_user_id = State()

@router.message(F.text == "üîë –ù–ê–°–¢–†–û–ò–¢–¨ API –ö–õ–Æ–ß–ò")
async def api_setup_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π"""
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    api_keys = await get_user_api_keys(user[0])  # user[0] - —ç—Ç–æ id
    
    status_text = "üìä –°–¢–ê–¢–£–° API:\n"
    
    if api_keys and api_keys[2]:  # api_keys[2] - lzt_token
        status_text += "‚úÖ LZT API: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
    else:
        status_text += "‚ùå LZT API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        
    if api_keys and api_keys[3]:  # api_keys[3] - g2g_api_key
        status_text += "‚úÖ G2G API: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
    else:
        status_text += "‚ùå G2G API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"

    menu_text = f"""
üîë –ù–ê–°–¢–†–û–ô–ö–ê API –ö–õ–Æ–ß–ï–ô

{status_text}
–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
"""
    await message.answer(menu_text, reply_markup=get_api_setup_keyboard())

@router.callback_query(F.data == "setup_lzt")
async def setup_lzt_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LZT API"""
    instruction_text = """
üîë –ù–ê–°–¢–†–û–ô–ö–ê LZT API

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: https://zelenka.guru/account/api
2. –°–æ–∑–¥–∞–π—Ç–µ OAuth Token
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞: Market API
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ

üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à LZT Token:
"""
    await callback.message.edit_text(instruction_text)
    await callback.message.answer("–û–∂–∏–¥–∞—é –≤–∞—à —Ç–æ–∫–µ–Ω...", reply_markup=get_back_keyboard())
    await state.set_state(APIStates.waiting_lzt_token)
    await callback.answer()

@router.message(APIStates.waiting_lzt_token)
async def process_lzt_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ LZT —Ç–æ–∫–µ–Ω–∞"""
    token = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    is_valid = await test_lzt_connection(token)
    
    if is_valid:
        user = await get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        encrypted_token = encryption_service.encrypt(token)
        await save_lzt_token(user[0], encrypted_token)
    
        success_text = """
‚úÖ LZT API –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–û!

–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
"""
        await message.answer(success_text)
        await api_setup_menu(message)
    else:
        error_text = """
‚ùå –ù–ï–í–ï–†–ù–´–ô LZT TOKEN

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ Market API
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
"""
        await message.answer(error_text, reply_markup=get_back_keyboard())
    
    await state.clear()

@router.callback_query(F.data == "setup_g2g")
async def setup_g2g_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ G2G API"""
    instruction_text = """
üîë –ù–ê–°–¢–†–û–ô–ö–ê G2G API

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ G2G Account ‚Üí API Management
2. –°–æ–∑–¥–∞–π—Ç–µ API Keys
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ

üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à G2G API Key:
"""
    await callback.message.edit_text(instruction_text)
    await callback.message.answer("–û–∂–∏–¥–∞—é API Key...", reply_markup=get_back_keyboard())
    await state.set_state(APIStates.waiting_g2g_api_key)
    await callback.answer()

@router.message(APIStates.waiting_g2g_api_key)
async def process_g2g_api_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ G2G API Key"""
    api_key = message.text.strip()
    await state.update_data(g2g_api_key=api_key)
    
    await message.answer("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ G2G Secret Key:", reply_markup=get_back_keyboard())
    await state.set_state(APIStates.waiting_g2g_secret)

@router.message(APIStates.waiting_g2g_secret)
async def process_g2g_secret(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ G2G Secret Key"""
    secret = message.text.strip()
    await state.update_data(g2g_secret=secret)
    
    await message.answer("üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ G2G User ID:", reply_markup=get_back_keyboard())
    await state.set_state(APIStates.waiting_g2g_user_id)

@router.message(APIStates.waiting_g2g_user_id)
async def process_g2g_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ G2G User ID –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.text.strip()
    data = await state.get_data()
    
    api_key = data.get('g2g_api_key')
    secret = data.get('g2g_secret')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º G2G –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    is_valid = await test_g2g_connection(api_key, secret, user_id)
    
    if is_valid:
        user = await get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏
        encrypted_api_key = encryption_service.encrypt(api_key)
        encrypted_secret = encryption_service.encrypt(secret)
        
        await save_g2g_keys(user[0], encrypted_api_key, encrypted_secret, user_id)
    
        success_text = """
‚úÖ G2G API –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–û!

–í—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
"""
        await message.answer(success_text)
        await api_setup_menu(message)
    else:
        error_text = """
‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø G2G API

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API Key –∏ Secret
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å User ID

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
"""
        await message.answer(error_text, reply_markup=get_back_keyboard())
    
    await state.clear()

@router.callback_query(F.data == "check_all_apis")
async def check_all_apis(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    api_keys = await get_user_api_keys(user[0])
    status_text = "üîç –ü–†–û–í–ï–†–ö–ê API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:\n\n"
    
    if api_keys and api_keys[2]:  # lzt_token
        try:
            decrypted_token = encryption_service.decrypt(api_keys[2])
            lzt_valid = await test_lzt_connection(decrypted_token)
            status_text += "‚úÖ LZT API: –†–∞–±–æ—Ç–∞–µ—Ç\n" if lzt_valid else "‚ùå LZT API: –û—à–∏–±–∫–∞\n"
        except:
            status_text += "‚ùå LZT API: –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏\n"
    else:
        status_text += "‚ùå LZT API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        
    if api_keys and api_keys[3]:  # g2g_api_key
        try:
            decrypted_api_key = encryption_service.decrypt(api_keys[3])
            decrypted_secret = encryption_service.decrypt(api_keys[4])
            g2g_valid = await test_g2g_connection(decrypted_api_key, decrypted_secret, api_keys[5])
            status_text += "‚úÖ G2G API: –†–∞–±–æ—Ç–∞–µ—Ç\n" if g2g_valid else "‚ùå G2G API: –û—à–∏–±–∫–∞\n"
        except:
            status_text += "‚ùå G2G API: –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏\n"
    else:
        status_text += "‚ùå G2G API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
    
    await callback.message.edit_text(status_text, reply_markup=get_api_setup_keyboard())
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from handlers.start import cmd_start
    await cmd_start(callback.message)
    await callback.answer()

@router.callback_query(F.data == "api_setup")
async def back_to_api_setup(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é API"""
    await api_setup_menu(callback.message)
    await callback.answer()