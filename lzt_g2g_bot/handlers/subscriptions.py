from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.crud import get_or_create_user, update_subscription
from datetime import datetime, timedelta

router = Router()

SUBSCRIPTION_PLANS = {
    "basic": {
        "name": "üü¢ –ë–ê–ó–û–í–´–ô",
        "price": 4,
        "daily_limit": 20,
        "features": [
            "20 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏",
            "–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ LZT", 
            "–ê–≤—Ç–æ–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ G2G",
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö"
        ]
    },
    "premium": {
        "name": "üü° –ü–†–ï–ú–ò–£–ú", 
        "price": 12,
        "daily_limit": 50,
        "features": [
            "50 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∞–∑–æ–≤–æ–≥–æ"
        ]
    },
    "pro": {
        "name": "üî¥ PRO",
        "price": 20, 
        "daily_limit": 100,
        "features": [
            "100 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏",
            "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "API –¥–æ—Å—Ç—É–ø",
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º"
        ]
    }
}

def get_subscription_keyboard():
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(text="üü¢ –ë–ê–ó–û–í–´–ô - $4", callback_data="sub_basic"),
        InlineKeyboardButton(text="üü° –ü–†–ï–ú–ò–£–ú - $12", callback_data="sub_premium"),
        InlineKeyboardButton(text="üî¥ PRO - $20", callback_data="sub_pro")
    )
    builder.adjust(1)
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()

@router.message(F.text == "üí≥ –í–´–ë–†–ê–¢–¨ –¢–ê–†–ò–§")
async def subscription_menu(message: Message):
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name, 
        last_name=message.from_user.last_name
    )
    
    current_plan = SUBSCRIPTION_PLANS.get(user[6], {}).get('name', '–ë–∞–∑–æ–≤—ã–π') if user else '–ë–∞–∑–æ–≤—ã–π'
    
    menu_text = f"""
üí≥ –í–´–ë–û–† –¢–ê–†–ò–§–ê

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {current_plan}

üü¢ –ë–ê–ó–û–í–´–ô - $4/–º–µ—Å
‚îú‚îÄ 20 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
‚îú‚îÄ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ LZT
‚îú‚îÄ –ê–≤—Ç–æ–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ G2G
‚îî‚îÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö

üü° –ü–†–ï–ú–ò–£–ú - $12/–º–µ—Å  
‚îú‚îÄ 50 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
‚îú‚îÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚îú‚îÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îî‚îÄ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∞–∑–æ–≤–æ–≥–æ

üî¥ PRO - $20/–º–µ—Å
‚îú‚îÄ 100 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
‚îú‚îÄ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
‚îú‚îÄ API –¥–æ—Å—Ç—É–ø
‚îî‚îÄ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:
"""
    await message.answer(menu_text, reply_markup=get_subscription_keyboard())

@router.callback_query(F.data.startswith("sub_"))
async def select_subscription(callback: CallbackQuery):
    plan_type = callback.data.replace("sub_", "")
    plan = SUBSCRIPTION_PLANS.get(plan_type)
    
    if not plan:
        await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await update_subscription(callback.from_user.id, plan_type)
    
    expiry_date = (datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')
    
    success_text = f"""
‚úÖ –¢–ê–†–ò–§ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!

{plan['name']} - ${plan['price']}/–º–µ—Å

üìä –õ–∏–º–∏—Ç—ã:
‚Ä¢ {plan['daily_limit']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏

üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
{chr(10).join(['‚Ä¢ ' + feature for feature in plan['features']])}

–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expiry_date}
"""
    await callback.message.edit_text(success_text)
    await callback.answer(f"–¢–∞—Ä–∏—Ñ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")