from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.crud import get_or_create_user, get_user_settings, update_user_settings
import asyncio

router = Router()

LZT_CATEGORIES = {
    "steam": "Steam",
    "valorant": "Valorant", 
    "lol": "LoL",
    "genshin-impact": "Genshin Impact",
    "honkai-star-rail": "Honkai: Star Rail",
    "zenless-zone-zero": "Zenless Zone Zero", 
    "minecraft": "Minecraft",
    "brawl-stars": "Brawl Stars",
    "clash-of-clans": "Clash of Clans"
}

class ParserStates(StatesGroup):
    waiting_markup = State()
    waiting_price_min = State()
    waiting_price_max = State()
    waiting_activity_filter = State()
    waiting_age_filter = State()

def get_parser_keyboard(selected_categories: list = None):
    if selected_categories is None:
        selected_categories = []
    
    builder = InlineKeyboardBuilder()
    
    for category_id, category_name in LZT_CATEGORIES.items():
        emoji = "‚úÖ" if category_id in selected_categories else "‚ö™"
        builder.add(InlineKeyboardButton(
            text=f"{emoji} {category_name}", 
            callback_data=f"cat_{category_id}"
        ))
    
    builder.adjust(2)
    
    builder.row(
        InlineKeyboardButton(text="üí∞ –ù–∞—Ü–µ–Ω–∫–∞", callback_data="set_markup"),
        InlineKeyboardButton(text="üìä –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="set_price_range")
    )
    
    builder.row(
        InlineKeyboardButton(text="üïê –§–∏–ª—å—Ç—Ä –æ—Ç–ª–µ–∂–∫–∏", callback_data="set_activity_filter"),
        InlineKeyboardButton(text="üìÖ –§–∏–ª—å—Ç—Ä –¥–∞–≤–Ω–æ—Å—Ç–∏", callback_data="set_age_filter")  
    )
    
    builder.row(InlineKeyboardButton(text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–ê–†–°–ò–ù–ì", callback_data="start_parsing"))
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()

@router.message(F.text == "üéØ –ù–ê–°–¢–†–û–ò–¢–¨ –ü–ê–†–°–ï–†")
async def parser_menu(message: Message):
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    settings = await get_user_settings(user[0])
    
    selected_cats = []
    if settings and settings[3]:  # parser_categories
        try:
            selected_cats = eval(settings[3])
        except:
            selected_cats = []
    
    markup = settings[2] if settings else 20
    price_min = settings[5] if settings else 1
    price_max = settings[6] if settings else 100
    activity = settings[8] if settings else '7'
    age = settings[7] if settings else 'any'
    
    menu_text = f"""
üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–°–ï–†–ê LZT

üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {markup}%
‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: ${price_min}
‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${price_max}
‚Ä¢ –û—Ç–ª–µ–∂–∫–∞: {activity}+ –¥–Ω–µ–π
‚Ä¢ –î–∞–≤–Ω–æ—Å—Ç—å: {age}

üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:
"""
    await message.answer(menu_text, reply_markup=get_parser_keyboard(selected_cats))

@router.callback_query(F.data.startswith("cat_"))
async def toggle_category(callback: CallbackQuery):
    category_id = callback.data.replace("cat_", "")
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    settings = await get_user_settings(user[0])
    
    current_cats = []
    if settings and settings[3]:
        try:
            current_cats = eval(settings[3])
        except:
            current_cats = []
    
    if category_id in current_cats:
        current_cats.remove(category_id)
    else:
        current_cats.append(category_id)
    
    await update_user_settings(user[0], {"parser_categories": str(current_cats)})
    
    await callback.message.edit_reply_markup(reply_markup=get_parser_keyboard(current_cats))
    await callback.answer()

@router.callback_query(F.data == "set_markup")
async def set_markup_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üíØ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20):")
    await state.set_state(ParserStates.waiting_markup)
    await callback.answer()

@router.message(ParserStates.waiting_markup)
async def process_markup(message: Message, state: FSMContext):
    try:
        markup = int(message.text.strip())
        if markup < 1 or markup > 500:
            await message.answer("‚ùå –ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1% –¥–æ 500%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        user = await get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        await update_user_settings(user[0], {"markup_percent": markup})
        
        await message.answer(f"‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {markup}%")
        await parser_menu(message)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.clear()

@router.callback_query(F.data == "set_price_range")
async def set_price_range_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await state.set_state(ParserStates.waiting_price_min)
    await callback.answer()

@router.message(ParserStates.waiting_price_min)
async def process_price_min(message: Message, state: FSMContext):
    try:
        price_min = int(message.text.strip())
        if price_min < 1:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(price_min=price_min)
        await message.answer("üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")
        await state.set_state(ParserStates.waiting_price_max)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

@router.message(ParserStates.waiting_price_max)
async def process_price_max(message: Message, state: FSMContext):
    try:
        price_max = int(message.text.strip())
        data = await state.get_data()
        price_min = data.get('price_min', 1)
        
        if price_max <= price_min:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        user = await get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        await update_user_settings(user[0], {
            "price_min": price_min,
            "price_max": price_max
        })
        
        await message.answer(f"‚úÖ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${price_min} - ${price_max}")
        await parser_menu(message)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.clear()

@router.callback_query(F.data == "start_parsing")
async def start_parsing(callback: CallbackQuery):
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name, 
        last_name=callback.from_user.last_name
    )
    
    settings = await get_user_settings(user[0])
    
    if not settings or not settings[3] or settings[3] == "[]":
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞!")
        return
    
    await callback.message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å LZT...")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    await asyncio.sleep(2)
    
    found_count = 8  # –ó–∞–≥–ª—É—à–∫–∞
    categories = eval(settings[3]) if settings and settings[3] else []
    
    result_text = f"""
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê

‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {found_count}
üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([LZT_CATEGORIES.get(cat, cat) for cat in categories[:3]])}
üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${settings[5] if settings else 1} - ${settings[6] if settings else 100}
‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 2.8 —Å–µ–∫

üí° –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ G2G —Å –Ω–∞—Ü–µ–Ω–∫–æ–π {settings[2] if settings else 20}%
"""
    await callback.message.answer(result_text)
    await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")