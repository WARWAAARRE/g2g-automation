from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.crud import get_or_create_user, get_user_api_keys, get_user_settings, create_user_offer, get_user_active_offers
import asyncio

router = Router()

LZT_CATEGORIES = {
    "steam": "Steam",
    "valorant": "Valorant", 
    "lol": "LoL",
    "genshin-impact": "Genshin Impact",
    "honkai-star-rail": "Honkai: Star Rail",
    "zenless-zone-zero": "Zenless Zone Zero", 
    "minecraft": "Minecraft",
    "brawl-stars": "Brawl Stars",
    "clash-of-clans": "Clash of Clans"
}

def get_auto_posting_keyboard(is_active: bool = False):
    builder = InlineKeyboardBuilder()
    
    if not is_active:
        builder.add(InlineKeyboardButton(text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ", callback_data="start_auto_posting"))
    else:
        builder.add(InlineKeyboardButton(text="‚è∏Ô∏è –û–°–¢–ê–ù–û–í–ò–¢–¨", callback_data="stop_auto_posting"))
    
    builder.add(InlineKeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="posting_stats"))
    builder.adjust(1)
    
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return builder.as_markup()

@router.message(F.text == "üîÑ –ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø")
async def auto_posting_menu(message: Message):
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    api_keys = await get_user_api_keys(user[0])
    settings = await get_user_settings(user[0])
    active_offers = await get_user_active_offers(user[0])
    
    has_lzt = bool(api_keys and api_keys[2])
    has_g2g = bool(api_keys and api_keys[3])
    categories = eval(settings[3]) if settings and settings[3] else []
    
    menu_text = f"""
üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø LZT ‚Üí G2G

üìä –°—Ç–∞—Ç—É—Å:
‚Ä¢ LZT API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if has_lzt else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
‚Ä¢ G2G API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if has_g2g else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} –≤—ã–±—Ä–∞–Ω–æ
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {settings[2] if settings else 20}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(active_offers)}

üöÄ –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å LZT
‚Ä¢ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ G2G —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
‚Ä¢ –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω–∞, –æ—Ç–ª–µ–∂–∫–∞, –¥–∞–≤–Ω–æ—Å—Ç—å)
‚Ä¢ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
"""
    await message.answer(menu_text, reply_markup=get_auto_posting_keyboard())

@router.callback_query(F.data == "start_auto_posting")
async def start_auto_posting(callback: CallbackQuery):
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    api_keys = await get_user_api_keys(user[0])
    settings = await get_user_settings(user[0])
    
    if not api_keys or not api_keys[2] or not api_keys[3]:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ LZT –∏ G2G API!")
        return
    
    if not settings or not settings[3] or settings[3] == "[]":
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞—Ä—Å–µ—Ä–∞!")
        return
    
    await callback.message.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ-–ø–æ—Å—Ç–∏–Ω–≥–∞
    progress_msg = await callback.message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ LZT...")
    await asyncio.sleep(1)
    
    await progress_msg.edit_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ G2G...")
    await asyncio.sleep(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã
    categories = eval(settings[3])
    for i, category in enumerate(categories[:3]):
        await create_user_offer(
            user_id=user[0],
            lzt_item_id=f"test_lzt_{i}",
            g2g_offer_id=f"test_g2g_{i}",
            title=f"Test {LZT_CATEGORIES.get(category, category)} Account",
            price=25.99 + i * 5,
            category=category
        )
        await asyncio.sleep(0.5)
    
    await progress_msg.edit_text("‚úÖ –ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
    
    result_text = f"""
‚úÖ –ê–í–¢–û-–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê

üìä –°—Ç–∞—Ç—É—Å:
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ LZT: üü¢ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ G2G: üü¢ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤: üü¢ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: 3

üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([LZT_CATEGORIES.get(cat, cat) for cat in categories[:3]])}
üí∞ –ù–∞—Ü–µ–Ω–∫–∞: {settings[2]}%

üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ò—â–µ—Ç –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ LZT –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
2. –°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ G2G —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
4. –ü–æ–∫—É–ø–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ LZT –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–∞—Ö
5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
"""
    await callback.message.answer(result_text, reply_markup=get_auto_posting_keyboard(is_active=True))
    await callback.answer("–ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")

@router.callback_query(F.data == "posting_stats")
async def show_posting_stats(callback: CallbackQuery):
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    active_offers = await get_user_active_offers(user[0])
    settings = await get_user_settings(user[0])
    
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–í–¢–û-–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(active_offers)}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(active_offers)}
‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: 0
‚Ä¢ –î–æ—Ö–æ–¥: $0.00

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {settings[2] if settings else 20}%
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(eval(settings[3])) if settings and settings[3] else 0}
‚Ä¢ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${settings[5] if settings else 1} - ${settings[6] if settings else 100}

üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
"""
    
    for i, offer in enumerate(active_offers[:5]):
        stats_text += f"‚Ä¢ {offer[4]} - ${offer[5]}\n"
    
    if len(active_offers) > 5:
        stats_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(active_offers) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
    
    await callback.message.answer(stats_text)
    await callback.answer()