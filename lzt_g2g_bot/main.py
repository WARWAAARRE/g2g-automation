import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import config
from database import init_db
from handlers.start import router as start_router
from handlers.api_setup import router as api_router
from handlers.subscriptions import router as subscriptions_router
from handlers.parser import router as parser_router
from handlers.auto_posting import router as auto_posting_router
from handlers.orders import router as orders_router
from services.order_checker import check_pending_orders

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        logger.info("‚úÖ Database initialized")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• —Ä–æ—É—Ç–µ—Ä–æ–≤
        dp.include_router(start_router)
        dp.include_router(api_router)
        dp.include_router(subscriptions_router)
        dp.include_router(parser_router)
        dp.include_router(auto_posting_router)
        dp.include_router(orders_router)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler = AsyncIOScheduler()
        scheduler.add_job(
            check_pending_orders,
            'interval',
            minutes=5,  # üîÑ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç!
            args=[bot]
        )
        scheduler.start()
        logger.info("‚úÖ Order checker scheduler started (every 5 minutes)")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("‚úÖ Bot starting...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())